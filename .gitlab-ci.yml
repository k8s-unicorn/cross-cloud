stages:
  - Build
  - Artifacts
  - Cross-Cloud
  - End-To-End
  - Update-Dashboard

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - mkdir -p ./data ; touch ./data/empty.env
  - for envfile in data/*env ; do source $envfile ; echo ----- $envfile ---- ; cat $envfile ; done
  - export KUBECONFIG=$(pwd)/data/${CLOUD}/kubeconfig
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
      export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd

Cross-Cloud:
  image: crosscloudci/debian-docker 
  stage: Build
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE/provisioning:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE/provisioning:$CI_COMMIT_REF_SLUG"

Socat:
  stage: Build
  image: crosscloudci/debian-docker
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE/socat:$CI_COMMIT_REF_SLUG" ./socat/
    - docker push "$CI_REGISTRY_IMAGE/socat:$CI_COMMIT_REF_SLUG"

.build_source: &build_source
  image: buildpack-deps:stretch
  stage: Artifacts
  variables:
    # SOURCE
    # ORG: MUST BE SET
    # PROJECT: MUST BE SET
    # PROJECT_ID: MUST BE SET
  script:
    - apt update && apt -y install jq
    - >
      if [ -z "${SOURCE}" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      elif [ "${DISABLE_SOURCE}" == "yes" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/$PROJECT_ID/pipelines/${SOURCE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .id')
        curl -s -o data/"$PROJECT".env -L "${BASE_URL}/${ORG}/${PROJECT}/-/jobs/${PROJECT_JOB}/artifacts/raw/release.env"
        cat data/"$PROJECT".env
      fi

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

.build_branch: &build_branch
  image: buildpack-deps:stretch
  stage: Artifacts
  variables:
    # BRANCH: MUST BE SET
    # ORG: MUST BE SET
    # PROJECT: MUST BE SET
    # PROJECT_TOKEN: MUST BE SET
    # PROJECT_ID: MUST BE SET
  script:
    - apt update && apt -y install jq
    - >
      if [ -z "${BRANCH}" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        echo "Checking for Latest Build"
        curl -s -L -o data/${PROJECT}.url "${BASE_URL}/${ORG}/${PROJECT}/builds/artifacts/${BRANCH}/file/release.env?job=container"
        if cat data/"$PROJECT".url | sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw ; then
        RELEASE_ENV=$(cat data/${PROJECT}.url | sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
        curl -o data/${PROJECT}.env -L ${BASE_URL}/$RELEASE_ENV
        cat data/${PROJECT}.env
        else
          # PROJECT_PIPELINE=$(curl -X POST -F token=$CI_JOB_TOKEN -F ref=$BRANCH https://gitlab.cncf.ci/api/v4/projects/$PROJECT_ID/trigger/pipeline | jq '.id')
          PROJECT_PIPELINE=$(curl -X POST -F token=$PROJECT_TOKEN -F ref=$BRANCH -F "variables[BUILD_TRIGGER]=yes" "$BASE_URL"/api/v4/projects/$PROJECT_ID/trigger/pipeline | jq '.id')

          echo 'Wait for Build "FIX ME / HACK"'
          until [ "$JOB_STATUS" == '"success"' ]; do
              JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/$PROJECT_ID/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .status')" 
              sleep 0.5
              if [ "$JOB_STATUS" == '"failed"' ]; then
                  exit 1
              elif [ "$JOB_STATUS" == '"canceled"' ]; then
                  exit 1
              else
                  continue
              fi
          done
          echo 'Build Compleate'

          PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/$PROJECT_ID/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .id') 
          curl -s -o data/"$PROJECT".env -L "${BASE_URL}/${ORG}/${PROJECT}/-/jobs/${PROJECT_JOB}/artifacts/raw/release.env"
          cat data/"$PROJECT".env
        fi
      fi
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

.build_commit: &build_commit
  image: buildpack-deps:stretch
  stage: Artifacts
  variables:
    # COMMIT: MUST BE SET
    # ORG: MUST BE SET
    # PROJECT: MUST BE SET
    # PROJECT_ID: MUST BE SET
  script:
    - apt update && apt -y install jq
    - echo "$COMMIT"
    - >
      if [ -z "${COMMIT}" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        echo "Checking for Container Artifact on Commit"

        echo "Fetch Full SHA" 
        SHA=$(curl --header "PRIVATE-TOKEN: ${TOKEN}" "${BASE_URL}/api/v4/projects/9/repository/commits/${COMMIT}" | jq --raw-output '.id')
        echo ${SHA}

        echo "Fetch Most Recent Job ID's on Commit"
        COMPILE_JOB=$(curl --header "PRIVATE-TOKEN: ${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/repository/commits/${SHA}/statuses" | jq '.[] | select(.name=="compile")' | jq -s 'sort_by(.created_at)' | jq '.[0] | .id')
        echo ${COMPILE_JOB}
        
        CONTAINER_JOB=$(curl --header "PRIVATE-TOKEN: ${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/repository/commits/${SHA}/statuses" | jq '.[] | select(.name=="container")' | jq -s 'sort_by(.created_at)' | jq '.[0] | .id')

        echo "Fetch Artifact"
        curl -s -o data/${PROJECT}.env -L "$BASE_URL/${ORG}/${PROJECT}/-/jobs/${CONTAINER_JOB}/artifacts/raw/release.env"

        echo "Verify Artifact"
        if source ./data/${PROJECT}.env && env | grep ${PROJECT}; then
        cat data/${PROJECT}.env
        else
          echo "Trigger Jobs for missing Artifacts"
          
          PROJECT_COMPILE_JOB=$(curl -X POST --header "PRIVATE-TOKEN: ${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/jobs/${COMPILE_JOB}/retry" | jq '.id')
          echo $PROJECT_COMPILE_JOB
          echo 'Wait for Build "FIX ME / HACK"'
          until [ "$COMPILE_JOB_STATUS" == '"success"' ]; do
              COMPILE_JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/jobs/${PROJECT_COMPILE_JOB}" | jq -s '.[] | .status')" 
              sleep 0.5
              if [ "$COMPILE_JOB_STATUS" == '"failed"' ]; then
                  exit 1
              elif [ "$COMPILE_JOB_STATUS" == '"canceled"' ]; then
                  exit 1
              else
                  continue
              fi
          done
          echo 'Build Compleate'
          
          
          PROJECT_CONTAINER_JOB=$(curl -X POST --header "PRIVATE-TOKEN: ${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/jobs/${CONTAINER_JOB}/retry" | jq '.id')
          echo 'Wait for Build "FIX ME / HACK"'
          until [ "$CONTAINER_JOB_STATUS" == '"success"' ]; do
              CONTAINER_JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/${PROJECT_ID}/jobs/${PROJECT_CONTAINER_JOB}" | jq -s '.[] | .status')"
              sleep 0.5
              if [ "$PROJECT_CONTAINER_JOB" == '"failed"' ]; then
                  exit 1
              elif [ "$PROJECT_CONTAINER_JOB" == '"canceled"' ]; then
                  exit 1
              else
                  continue
              fi
          done
          echo 'Container Build Compleate'

          
          curl -s -o data/${PROJECT}.env -L "${BASE_URL}/${ORG}/${PROJECT}/-/jobs/${PROJECT_CONTAINER_JOB}/artifacts/raw/release.env"
          cat data/${PROJECT}.env
        fi
      fi

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data


# Deploy Template used for Each Cloud
.kubernetes_deploy_template: &kubernetes_deploy_template
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: Cross-Cloud
  variables:
    CLOUD: MUST BE SET
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CLOUD}-${DEPLOYMENT_SHA} s3 ${CLOUD}
    - helm init; kubectl rollout status -w deployment/tiller-deploy --namespace=kube-system
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

# # E2E Template used for Per Cloud e2e Tests
# .k8s_e2e_template: &k8s_e2e_template
#   image: ${CI_REGISTRY}/kubernetes/kubernetes/kubernetes-e2e:ci-v1-6-3.job.4793
#   stage: cncf-e2e
#   variables:
#     CLOUD: MUST BE SET
#   environment:
#     name: MUST BE SET
#     url: MUST BE SET
#   script:
#     - /kubernetes/e2e/run-conformance.sh

# Per Cloud Destroy Template only run when DESTROY_VAR is Set
.kubernetes_cloud_destroy_template: &kubernetes_cloud_destroy_template
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: Cross-Cloud
  when: manual
  variables:
    CLOUD: MUST BE SET
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CLOUD}-${DEPLOYMENT_SHA} s3 ${CLOUD}

# Build-Source VARs
Build-Source:
  <<: *build_source

# Build-Branch VARs
Build-Branch:
  <<: *build_branch

# Build-Branch VARs
Build-Commit:
  <<: *build_commit

    
# Cloud Deploy VARs
Provisioning:
  <<: *kubernetes_deploy_template
  variables:
    CLOUD: "${CLOUD}"

# # AWS E2E VARs
# aws_k8s_e2e:
#   <<: *k8s_e2e_template
#   variables:
#     CLOUD: ${AWS_CLOUD}
#   environment:
#     name: ${AWS_CLOUD}-${CI_COMMIT_REF_SLUG}
#     url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/

# AWS Destroy VARs 
Kubernetes_destroy:
  <<: *kubernetes_cloud_destroy_template
  variables:
    CLOUD: "${CLOUD}"

Dashboard:
  image: crosscloudci/debian-docker 
  stage: Update-Dashboard
  script:
    - echo 'true'
